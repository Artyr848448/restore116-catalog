#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import pandas as pd
import json
import sys
import os

def convert_excel_to_json(excel_file, output_file='products.json'):
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –≤–∫–ª–∞–¥–∫–∏ Excel —Ñ–∞–π–ª–∞ –≤ JSON —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –≤–µ–±-–∫–∞—Ç–∞–ª–æ–≥–∞
    """
    try:
        print(f"üìä –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª: {excel_file}")
        
        # –ß–∏—Ç–∞–µ–º –≤—Å–µ –≤–∫–ª–∞–¥–∫–∏
        excel_file_obj = pd.ExcelFile(excel_file)
        sheet_names = excel_file_obj.sheet_names
        
        print(f"‚úÖ –§–∞–π–ª –ø—Ä–æ—á–∏—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìã –ù–∞–π–¥–µ–Ω–æ –≤–∫–ª–∞–¥–æ–∫: {len(sheet_names)}")
        
        all_products = []
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –≤–∫–ª–∞–¥–∫—É —Å —Ç–æ–≤–∞—Ä–∞–º–∏
        product_sheets = ['–°–º–∞—Ä—Ç—Ñ–æ–Ω—ã', '–ü–ª–∞–Ω—à–µ—Ç—ã', '–ù–æ—É—Ç–±—É–∫–∏', '–ß–∞—Å—ã', '–ù–∞—É—à–Ω–∏–∫–∏']
        
        for sheet_name in product_sheets:
            if sheet_name in sheet_names:
                print(f"\nüîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∫–ª–∞–¥–∫—É: '{sheet_name}'")
                
                try:
                    df = pd.read_excel(excel_file, sheet_name=sheet_name)
                    print(f"   üìã –°—Ç—Ä–æ–∫: {len(df)}")
                    
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                    products = convert_sheet_to_products(df, sheet_name)
                    all_products.extend(products)
                    
                    print(f"   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
                    if products:
                        print(f"   üì± –ü—Ä–∏–º–µ—Ä—ã:")
                        for i, product in enumerate(products[:2]):
                            print(f"     {i+1}. {product['model']} - {product['price']:,.0f} ‚ÇΩ")
                    
                except Exception as e:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∫–ª–∞–¥–∫–∏ '{sheet_name}': {e}")
                    continue
        
        print(f"\nüéâ –û–±—â–∏–π –∏—Ç–æ–≥:")
        print(f"üìä –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(all_products)}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON —Ñ–∞–π–ª
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(all_products, f, ensure_ascii=False, indent=2)
        
        print(f"üíæ JSON —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_file}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        categories = {}
        for product in all_products:
            cat = product['category']
            categories[cat] = categories.get(cat, 0) + 1
        
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
        for cat, count in categories.items():
            print(f"   {cat}: {count} —Ç–æ–≤–∞—Ä–æ–≤")
        
        return all_products
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")
        return None

def convert_sheet_to_products(df, sheet_name):
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ–¥–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç —Ç–æ–≤–∞—Ä–æ–≤
    """
    products = []
    
    for index, row in df.iterrows():
        try:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ —Å—Ç—Ä–æ–∫–∏ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
            if pd.isna(row.iloc[0]) or str(row.iloc[0]).startswith('‚Äî') or str(row.iloc[0]).startswith('–ö–∞—Ç–µ–≥–æ—Ä–∏—è'):
                continue
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–ª–æ–Ω–æ–∫
            category = str(row.iloc[0]).strip() if pd.notna(row.iloc[0]) else ''
            brand = str(row.iloc[1]).strip() if pd.notna(row.iloc[1]) else 'Apple'
            lineup = str(row.iloc[2]).strip() if pd.notna(row.iloc[2]) else ''
            model = str(row.iloc[3]).strip() if pd.notna(row.iloc[3]) else ''
            submodel = str(row.iloc[4]).strip() if pd.notna(row.iloc[4]) else ''
            variant = str(row.iloc[5]).strip() if pd.notna(row.iloc[5]) else ''
            color = str(row.iloc[6]).strip() if pd.notna(row.iloc[6]) else ''
            gb = str(row.iloc[8]).strip() if pd.notna(row.iloc[8]) else ''
            price = float(row.iloc[9]) if pd.notna(row.iloc[9]) and str(row.iloc[9]).replace('.', '').isdigit() else 0
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
            full_model = f"{model} {submodel}".strip()
            if variant and variant != '‚Äî':
                full_model += f" {variant}"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –≤–µ–±-–∫–∞—Ç–∞–ª–æ–≥–∞
            web_category = get_web_category(category, lineup)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—ä–µ–º –ø–∞–º—è—Ç–∏
            storage = f"{gb}" if gb and gb != 'nan' and gb != '‚Äî' else 'N/A'
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Ç–æ–≤–∞—Ä–∞
            product = {
                'id': len(products) + 1,
                'model': full_model,
                'brand': brand,
                'category': web_category,
                'price': int(price),
                'color': color,
                'storage': storage
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ —Ü–µ–Ω–∞ –±–æ–ª—å—à–µ 0
            if product['model'] and product['category'] and product['price'] > 0:
                products.append(product)
                
        except Exception as e:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
            continue
    
    return products

def get_web_category(excel_category, lineup):
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ Excel –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –≤–µ–±-–∫–∞—Ç–∞–ª–æ–≥–∞
    """
    if '–°–º–∞—Ä—Ç—Ñ–æ–Ω' in excel_category or 'iPhone' in lineup:
        return 'iPhone'
    elif '–ü–ª–∞–Ω—à–µ—Ç' in excel_category or 'iPad' in lineup:
        return 'iPad'
    elif '–ù–æ—É—Ç–±—É–∫' in excel_category or 'Mac' in lineup:
        return 'Mac'
    elif '–ß–∞—Å—ã' in excel_category or 'Watch' in lineup:
        return '–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã'
    elif '–ù–∞—É—à–Ω–∏–∫–∏' in excel_category or 'AirPods' in lineup:
        return '–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã'
    else:
        return excel_category

def main():
    excel_file = "–ê–π—Ñ–æ–Ω—ã –ú–∞—Ç—Ä–∏—Ü–∞.xlsx"
    
    if not os.path.exists(excel_file):
        print(f"‚ùå –§–∞–π–ª {excel_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é Excel –≤ JSON...")
    print("=" * 60)
    
    products = convert_excel_to_json(excel_file)
    
    if products:
        print("=" * 60)
        print("üéâ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}")
        print("üåê –¢–µ–ø–µ—Ä—å –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É apple-store.html –≤ –±—Ä–∞—É–∑–µ—Ä–µ")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —Ç–æ–≤–∞—Ä–æ–≤
        print(f"\nüì± –ü—Ä–∏–º–µ—Ä—ã —Ç–æ–≤–∞—Ä–æ–≤:")
        for i, product in enumerate(products[:5]):
            print(f"   {i+1}. {product['model']} - {product['price']:,} ‚ÇΩ ({product['color']}, {product['storage']})")
    else:
        print("‚ùå –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")

if __name__ == "__main__":
    main()
