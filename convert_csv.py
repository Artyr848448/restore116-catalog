#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import pandas as pd
import json
import os

def convert_csv_to_json():
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Å–µ CSV —Ñ–∞–π–ª—ã –≤ JSON —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –≤–µ–±-–∫–∞—Ç–∞–ª–æ–≥–∞
    """
    try:
        print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é CSV —Ñ–∞–π–ª–æ–≤ –≤ JSON...")
        print("=" * 60)
        
        all_products = []
        
        # –°–ø–∏—Å–æ–∫ CSV —Ñ–∞–π–ª–æ–≤ –∏ –∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –≤–µ–±-–∫–∞—Ç–∞–ª–æ–≥–∞
        csv_files = {
            '–°–º–∞—Ä—Ç—Ñ–æ–Ω—ã.csv': 'iPhone',
            '–ü–ª–∞–Ω—à–µ—Ç—ã.csv': 'iPad', 
            '–ù–æ—É—Ç–±—É–∫–∏.csv': 'Mac',
            '–ß–∞—Å—ã.csv': '–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã',
            '–ù–∞—É—à–Ω–∏–∫–∏.csv': '–ù–∞—É—à–Ω–∏–∫–∏'
        }
        
        for csv_file, web_category in csv_files.items():
            if os.path.exists(csv_file):
                print(f"\nüîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª: {csv_file}")
                
                try:
                    # –ß–∏—Ç–∞–µ–º CSV —Ñ–∞–π–ª
                    df = pd.read_csv(csv_file, encoding='utf-8')
                    print(f"   üìã –°—Ç—Ä–æ–∫: {len(df)}")
                    
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                    products = convert_csv_to_products(df, web_category)
                    all_products.extend(products)
                    
                    print(f"   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
                    if products:
                        print(f"   üì± –ü—Ä–∏–º–µ—Ä—ã:")
                        for i, product in enumerate(products[:2]):
                            print(f"     {i+1}. {product['model']} - {product['price']:,.0f} ‚ÇΩ")
                    
                except Exception as e:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ '{csv_file}': {e}")
                    continue
            else:
                print(f"   ‚ö†Ô∏è –§–∞–π–ª {csv_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        print(f"\nüéâ –û–±—â–∏–π –∏—Ç–æ–≥:")
        print(f"üìä –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(all_products)}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON —Ñ–∞–π–ª
        with open('products.json', 'w', encoding='utf-8') as f:
            json.dump(all_products, f, ensure_ascii=False, indent=2)
        
        print(f"üíæ JSON —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: products.json")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        categories = {}
        for product in all_products:
            cat = product['category']
            categories[cat] = categories.get(cat, 0) + 1
        
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
        for cat, count in categories.items():
            print(f"   {cat}: {count} —Ç–æ–≤–∞—Ä–æ–≤")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —Ç–æ–≤–∞—Ä–æ–≤
        print(f"\nüì± –ü—Ä–∏–º–µ—Ä—ã —Ç–æ–≤–∞—Ä–æ–≤:")
        for i, product in enumerate(all_products[:5]):
            print(f"   {i+1}. {product['model']} - {product['price']:,} ‚ÇΩ ({product['color']}, {product['storage']})")
        
        return all_products
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–æ–≤: {e}")
        return None

def convert_csv_to_products(df, web_category):
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ CSV —Ñ–∞–π–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç —Ç–æ–≤–∞—Ä–æ–≤
    """
    products = []
    
    for index, row in df.iterrows():
        try:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ —Å—Ç—Ä–æ–∫–∏ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
            if pd.isna(row.iloc[0]) or str(row.iloc[0]).startswith('‚Äî') or str(row.iloc[0]).startswith('–ö–∞—Ç–µ–≥–æ—Ä–∏—è'):
                continue
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–ª–æ–Ω–æ–∫
            category = str(row.iloc[0]).strip() if pd.notna(row.iloc[0]) else ''
            brand = str(row.iloc[1]).strip() if pd.notna(row.iloc[1]) else 'Apple'
            lineup = str(row.iloc[2]).strip() if pd.notna(row.iloc[2]) else ''
            model = str(row.iloc[3]).strip() if pd.notna(row.iloc[3]) else ''
            submodel = str(row.iloc[4]).strip() if pd.notna(row.iloc[4]) else ''
            variant = str(row.iloc[5]).strip() if pd.notna(row.iloc[5]) else ''
            color = str(row.iloc[6]).strip() if pd.notna(row.iloc[6]) else ''
            gb = str(row.iloc[8]).strip() if pd.notna(row.iloc[8]) else ''
            price = float(row.iloc[9]) if pd.notna(row.iloc[9]) and str(row.iloc[9]).replace('.', '').isdigit() else 0
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
            full_model = f"{model} {submodel}".strip()
            if variant and variant != '‚Äî':
                full_model += f" {variant}"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—ä–µ–º –ø–∞–º—è—Ç–∏
            storage = f"{gb}" if gb and gb != 'nan' and gb != '‚Äî' else 'N/A'
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Ç–æ–≤–∞—Ä–∞
            product = {
                'id': len(products) + 1,
                'model': full_model,
                'brand': brand,
                'category': web_category,
                'price': int(price),
                'color': color,
                'storage': storage
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ —Ü–µ–Ω–∞ –±–æ–ª—å—à–µ 0
            if product['model'] and product['category'] and product['price'] > 0:
                products.append(product)
                
        except Exception as e:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
            continue
    
    return products

if __name__ == "__main__":
    products = convert_csv_to_json()
    
    if products:
        print("=" * 60)
        print("üéâ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}")
        print("üåê –¢–µ–ø–µ—Ä—å –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É apple-store.html –≤ –±—Ä–∞—É–∑–µ—Ä–µ")
    else:
        print("‚ùå –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")
