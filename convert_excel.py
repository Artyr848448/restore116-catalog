#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import pandas as pd
import json
import sys
import os

def convert_excel_to_json(excel_file, output_file='products.json'):
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç Excel —Ñ–∞–π–ª –≤ JSON —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –≤–µ–±-–∫–∞—Ç–∞–ª–æ–≥–∞
    """
    try:
        print(f"üìä –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª: {excel_file}")
        
        # –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
        df = pd.read_excel(excel_file)
        
        print(f"‚úÖ –§–∞–π–ª –ø—Ä–æ—á–∏—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìã –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫: {len(df)}")
        print(f"üìã –ö–æ–ª–æ–Ω–∫–∏: {list(df.columns)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        print("\nüîç –ü–µ—Ä–≤—ã–µ 3 —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö:")
        print(df.head(3).to_string())
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        products = []
        
        for index, row in df.iterrows():
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Ç–æ–≤–∞—Ä–∞
            product = {
                'id': index + 1,
                'model': str(row.iloc[0]).strip() if pd.notna(row.iloc[0]) else '',  # –ú–æ–¥–µ–ª—å
                'brand': str(row.iloc[1]).strip() if pd.notna(row.iloc[1]) else 'Apple',  # –ë—Ä–µ–Ω–¥
                'category': str(row.iloc[2]).strip() if pd.notna(row.iloc[2]) else '',  # –ö–∞—Ç–µ–≥–æ—Ä–∏—è
                'price': float(row.iloc[3]) if pd.notna(row.iloc[3]) and str(row.iloc[3]).replace('.', '').replace(',', '').isdigit() else 0,  # –¶–µ–Ω–∞
                'color': str(row.iloc[4]).strip() if pd.notna(row.iloc[4]) else '',  # –¶–≤–µ—Ç
                'storage': f"{int(row.iloc[5])} –ì–ë" if pd.notna(row.iloc[5]) and str(row.iloc[5]).replace('.', '').isdigit() else 'N/A'  # –ì–ë
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if product['model'] and product['category']:
                products.append(product)
        
        print(f"\n‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON —Ñ–∞–π–ª
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(products, f, ensure_ascii=False, indent=2)
        
        print(f"üíæ JSON —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_file}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
        print("\nüì± –ü—Ä–∏–º–µ—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤:")
        for i, product in enumerate(products[:3]):
            print(f"{i+1}. {product['model']} - {product['price']:,.0f} ‚ÇΩ ({product['color']}, {product['storage']})")
        
        return products
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")
        return None

def main():
    excel_file = "–ê–π—Ñ–æ–Ω—ã –ú–∞—Ç—Ä–∏—Ü–∞.xlsx"
    
    if not os.path.exists(excel_file):
        print(f"‚ùå –§–∞–π–ª {excel_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ, —á—Ç–æ –∏ —Å–∫—Ä–∏–ø—Ç.")
        return
    
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é Excel –≤ JSON...")
    print("=" * 50)
    
    products = convert_excel_to_json(excel_file)
    
    if products:
        print("=" * 50)
        print("üéâ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}")
        print("üåê –¢–µ–ø–µ—Ä—å –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É apple-store.html –≤ –±—Ä–∞—É–∑–µ—Ä–µ")
    else:
        print("‚ùå –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")

if __name__ == "__main__":
    main()
